kind: ConfigMap
apiVersion: v1
metadata:
  creationTimestamp: null
  name: env-config
data:
  # A lot of these could be secrets, -Doug
  TZ: '"Etc/UTC"'
  DB_USER: homer_user
  DB_PASS: homer_password
  USE_REMOTE_MYSQL: "false"
  DB_HOST: mysql
  DB_PORT: "3306"
  MYSQL_ROOT_PASSWORD: secret
  KAMAILIO_HEP_PORT: "9060"
---
apiVersion: batch/v1
kind: Job
metadata:
  creationTimestamp: null
  name: bootstrap
spec:
  template:
    metadata:
      creationTimestamp: null
      name: bootstrap
    spec:
      restartPolicy: Never
      containers:
      - name: bootstrap-mysql
        command:
          - "/bin/bash"
          - "-c"
          - "./bootstrap.sh && echo Bootstrapped @ $(date) > /homer-semaphore/.bootstrapped"
        envFrom:
          - configMapRef:
             name: env-config
        image: dougbtv/homer-bootstrap-data
        resources: {}
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
      volumes:
      - name: homer-data-semaphore
        persistentVolumeClaim:
          claimName: homer-data-semaphore
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: cron
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: cron
    spec:
      initContainers:
      - name: init-cron
        image: centos:centos7
        command: ['/bin/bash', '-c', 'if [[ ! -f "/homer-semaphore/.bootstrapped" ]]; then exit 1; else exit 0; fi']
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
      containers:
      - name: homer-cron
        envFrom:
          - configMapRef:
              name: env-config
        image: dougbtv/homer-cron
        resources: {}
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
      restartPolicy: Always
      volumes:
      - name: homer-data-semaphore
        persistentVolumeClaim:
          claimName: homer-data-semaphore
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: kamailio
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: kamailio
    spec:
      initContainers:
      - name: init-kamailio
        image: centos:centos7
        command: ['/bin/bash', '-c', 'if [[ ! -f "/homer-semaphore/.bootstrapped" ]]; then exit 1; else exit 0; fi']
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
      containers:
      - name: homer-kamailio
        envFrom:
          - configMapRef:
              name: env-config
        image: dougbtv/homer-kamailio
        ports:
        - containerPort: 9060
          protocol: UDP
        resources: {}
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
      restartPolicy: Always
      volumes:
      - name: homer-data-semaphore
        persistentVolumeClaim:
          claimName: homer-data-semaphore
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: mysql
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: mysql
    spec:
      containers:
      - command:
          - /entrypoint.sh 
        args:
          - mysqld
        envFrom:
          - configMapRef:
              name: env-config
        image: mysql:5.6
        name: mysql
        resources: {}
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
        - mountPath: /var/lib/mysql
          name: homer-data-mysql
      restartPolicy: Always
      volumes:
      - name: homer-data-semaphore
        persistentVolumeClaim:
          claimName: homer-data-semaphore
      - name: homer-data-mysql
        persistentVolumeClaim:
          claimName: homer-data-mysql
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: webapp
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: webapp
    spec:
      initContainers:
      - name: init-webapp
        image: centos:centos7
        command: ['/bin/bash', '-c', 'if [[ ! -f "/homer-semaphore/.bootstrapped" ]]; then exit 1; else exit 0; fi']
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
      containers:
      - name: homer-webapp
        envFrom:
          - configMapRef:
             name: env-config
        image: dougbtv/homer-webapp
        ports:
        - containerPort: 80
        resources: {}
        volumeMounts:
        - mountPath: /homer-semaphore/
          name: homer-data-semaphore
        # - mountPath: /var/www/html/store/dashboard/
        #   name: homer-data-dashboard
      restartPolicy: Always
      volumes:
      - name: homer-data-semaphore
        persistentVolumeClaim:
          claimName: homer-data-semaphore
      # - name: homer-data-dashboard
      #   persistentVolumeClaim:
      #     claimName: homer-data-dashboard
status: {}
---
# ------------------------------------------------------------------------------------------------------------
# -- Alpha feature!
# ------------------------------------------------------------------------------------------------------------
# k8s cron docs: http://tinyurl.com/kube-cron
# Have to enable it in the api etc. So...
# [centos@kube-master k8s]$ sudo diff /etc/kubernetes/manifests/kube-apiserver.yaml /root/kube-apiserver.yaml
# 36d35
# <     - --runtime-config=batch/v2alpha1=true
# ------------------------------------------------------------------------------------------------------------
# The api server will automatically apply this after changing that manifest.
# ------------------------------------------------------------------------------------------------------------
# NOTE: Since this also needs to run on first instantiation to "prime" all the tables...
# You'll also need to enable a one-shot job to also do the same thing.
# ------------------------------------------------------------------------------------------------------------
# apiVersion: batch/v2alpha1
# kind: CronJob
# metadata:
#   name: homer-cron
# spec:
#   schedule: "30 3 * * *"
#   jobTemplate:
#     spec:
#       template:
#         spec:
#           containers:
#             - name: homer-cron
#               envFrom:
#                 - configMapRef:
#                     name: env-config
#               image: dougbtv/homer-k8s-cron
#               command: 
#                 - "/run.sh"
#               resources: {}
#               volumeMounts:
#                 - mountPath: /homer-semaphore/
#                   name: homer-data-semaphore
#           restartPolicy: OnFailure
#           volumes:
#             - name: homer-data-semaphore
#               persistentVolumeClaim:
#                 claimName: homer-data-semaphore

---